#!/bin/bash

#------------------------------------------------------------------------------
# Restore ngScreener config
# Usage:
#     restoreScript.sh [option] backupFile
# Option:
#     [no option] : restore all config files and DB dump
#     --data      : plus no option, restore logs under /log-collector
# Error Code:
#     0 = OK.
#     1 = File not exist
#     2 = Bad extension
#     3 = File not generated by backup script
#     4 = Archive file version is not compatible with ngscreener version
#------------------------------------------------------------------------------

uncompressedRootDir="/data/backupDir"
option=
archiveFile=

function printUsage() {
    echo "Usage:"
    echo "    restoreScript.sh [option] backupFile"
    echo "Options:"
    echo "    [no option] : restore all config files and DB dump"
    echo "    --data      : plus no option, restore logs under /log-collector"
    echo "Example"
    echo "    restoreScript.sh /tmp/backupFile.tar.gz"
}

function checkArchiveFile() {
    if [ ! -f $archiveFile ]; then
        echo "[ERROR] File $archiveFile does not exist"
        exit 1
    fi

    archiveFileExtension=${archiveFile#*.}
    if [ "$archiveFileExtension" != "tar.gz" ]; then
        echo "Extension '$archiveFileExtension' is not supported"
        echo "Supported extensions: tar.gz"
        exit 2
    fi

    /bin/tar -tvf $archiveFile -P | grep "/tmp/version" > /dev/null
    if [[ $? -ne 0 ]]; then
        echo "[ERROR] Unrecognize backup file. Please use the file generated by the backup script."
        exit 3
    fi
}

function uncompressArchiveFile() {
    /bin/rm -rf $uncompressedRootDir
    /bin/mkdir -p $uncompressedRootDir

    echo "[INFO] Uncompress archive file in progress..."
    /bin/tar -xzf $archiveFile -C $uncompressedRootDir > /dev/null 2>&1
    echo "[INFO] Uncompress archive file : DONE"
}

function checkCompatibleVersion() {
    version=$(ngadmin showDaemonVersion | cut -d"-" -f1)
    backupVersion=$(head -1 $uncompressedRootDir/tmp/version)

    if [ "x$version" != "x$backupVersion" ]; then
        echo "[ERROR] Archive file version [$backupVersion] is not compatible with the ngscreener version [$version]"
        printf "Continue to proceed ? [Y/n] "
        read answer
        while true ; do
            case $answer in
            "y"|"Y")
                break
                ;;
            "n"|"N")
                /bin/rm -rf $uncompressedRootDir
                exit 4
                ;;
            *)
                printf "Continue to proceed ? [Y/n] "
                read answer
                ;;
            esac
        done
    fi
}

function restoreDatabase() {
    echo "[INFO] Restore DB ngscreener in progress..."

    dbFolder=$uncompressedRootDir/storage/DB
    dbHost=127.0.0.1
    dbPort=3306
    dbName="ngscreener"
    dbFile="$dbFolder/"$dbName".sql"

    # Skip DB restoration if mariadb is not available
    mysql_command=`mysql -h $dbHost -P $dbPort -uroot -e "SELECT 1 FROM dual;" 2>/dev/null`
    if [[ $? -ne 0 ]]; then
        echo "WARN: Cannot access to the MariaDB. Skip restoring database."
        return
    fi

    mysql -h $dbHost -P $dbPort -u root -e "set global max_allowed_packet=1073741824;"
    /bin/systemctl restart mariadb.ngc
    mysqladmin -h $dbHost -P $dbPort -u prelude -pprelude_1234 -f drop $dbName > /dev/null
    mysql -h $dbHost -P $dbPort -u prelude -pprelude_1234 -e "create database $dbName"
    mysql -h $dbHost -P $dbPort -u prelude -pprelude_1234 $dbName < $dbFile > /dev/null
    mysql -h $dbHost -P $dbPort -u root -e "set global max_allowed_packet=4194304"
    /bin/systemctl restart mariadb.ngc

    echo "[INFO] Restore DB ngscreener : Done"
}

function restoreFile() {
    for file in $@; do
        sourceFile=$uncompressedRootDir$file
        if [ -e $sourceFile ];then
            echo "[INFO] Restore $file in progress..."
            /bin/rm -rf $file
            destFolder=$(dirname $file)
            mkdir -p $destFolder
            /bin/cp -rp $sourceFile $destFolder
            echo "[INFO] Restore $file : Done"
        else
            echo "[INFO] $file not exists in backupFile"
        fi
    done
}

function restoreSystemFiles() {
    restoreFile /etc/hosts
    restoreFile /etc/cron.d /etc/cron.daily /etc/cron.deny /etc/cron.hourly /etc/cron.monthly /etc/crontab /etc/cron.weekly
    restoreFile /etc/ng-screener /etc/syslog-ng-rules /usr/local/prelude-runtime/etc/prelude-lml/ruleset
    restoreFile /usr/local/ng-screener/ngprocessing/ngmesos/etc /usr/local/ng-screener/ngprocessing/ngspark/conf
}

function restoreLogs() {
    restoreFile /storage/log-collector /storage/integrity
}

function restoreNgadmin() {
    ngadminDirectory=$uncompressedRootDir/storage/ngadmin

    echo "[INFO] Restore objects using ngadmin in progress..."
    echo "[INFO] - Restore Forensic filter"
    ngadmin forensic_importFilters -f $ngadminDirectory/forensicFilters.zip > /dev/null

    echo "[INFO] Restore objects using ngadmin : Done"
}

function cleanUncompressedFiles() {
    /bin/rm -rf $uncompressedRootDir
}

# ==============================================================================

# Parse parameters
if [ $# -eq 1 ]; then
    archiveFile=$1
elif [ $# -eq 2 ]; then
    option=$1
    archiveFile=$2
else
    printUsage
    exit 1
fi

checkArchiveFile
uncompressArchiveFile
checkCompatibleVersion

/bin/systemctl stop ng-screener
/bin/systemctl stop ng-screener-ui

restoreDatabase
restoreSystemFiles
if [ "$option" == "--data" ]; then
    restoreLogs
fi

/bin/systemctl start ng-screener
/bin/systemctl start ng-screener-ui

restoreNgadmin
cleanUncompressedFiles

echo
echo '--------------------------------------------------------------------'
echo '[INFO] Restore Done Successfully'
echo '--------------------------------------------------------------------'
echo
